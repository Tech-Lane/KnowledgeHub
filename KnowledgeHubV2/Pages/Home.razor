@page "/"
@inject NoteRepository NoteRepository
@inject NavigationManager NavigationManager
@inject StateContainer StateContainer
@implements IAsyncDisposable

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-lg-8">
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h4 class="card-title">Welcome to KnowledgeHub</h4>
                    <p class="card-text">Your central place for organizing thoughts, ideas, and information!</p>
                </div>
            </div>

            <div class="card shadow-sm">
                <div class="card-header">
                    <h5><i class="fas fa-history me-2"></i>Recent Notes</h5>
                </div>
                <div class="list-group list-group-flush">
                    @if (recentNotes.Any())
                    {
                        @foreach (var note in recentNotes)
                        {
                            <a href="/note-editor/@note.NoteID" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                @note.Title
                                <small class="text-muted">@note.UpdatedAt.ToString("g")</small>
                            </a>
                        }
                    }
                    else
                    {
                        <div class="list-group-item">No recent notes found.</div>
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h5><i class="fas fa-chart-pie me-2"></i>Statistics</h5>
                </div>
                <div class="card-body">
                    <p><strong>Total Notes:</strong> @noteCount</p>
                    <p><strong>Total Folders:</strong> @folderCount</p>
                </div>
            </div>

            <div class="card shadow-sm">
                <div class="card-header">
                    <h5><i class="fas fa-bolt me-2"></i>Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" @onclick="CreateNewNote">
                            <i class="fas fa-plus me-2"></i>New Note
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private int noteCount;
    private int folderCount;
    private List<Note> recentNotes = new();

    protected override async Task OnInitializedAsync()
    {
        StateContainer.OnChange += StateHasChanged;
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        var (notes, folders) = await NoteRepository.GetAllDataAsync();
        noteCount = notes.Count();
        folderCount = folders.Count();
        recentNotes = notes.OrderByDescending(n => n.UpdatedAt).Take(5).ToList();
        StateHasChanged();
    }

    private async Task CreateNewNote()
    {
        var newNote = await NoteRepository.CreateNoteAsync("New Note", null);
        NavigationManager.NavigateTo($"/note-editor/{newNote.NoteID}");
    }

    public ValueTask DisposeAsync()
    {
        StateContainer.OnChange -= StateHasChanged;
        return ValueTask.CompletedTask;
    }
}
